# Configuration file for XHTMLRenderer core
#
# Follows formatting specified in JavaDoc for java.util.Properties
#   key = value
#
# If you define a key in this file, the later one will be used
# Comments are ignored, start the line with a # sign. 
# Feel free to comment liberally
#
# Naming convention: prefix all keys with
# xr.
# e.g. xr.render-speed = SUPER_FAST

# CSS / CASCADE
#
# Location of user-agent "default" CSS for renderer
xr.css.user-agent-default-css = /resources/css/

# TESTS
#
# Location of hamlet (large XHTML file)
xr.test.files.hamlet = /demos/browser/xhtml/hamlet.xhtml

# Format for logging when XRSimpleLogFormatter is used as the log output
# formatter. The format string for this key follows
# java.text.MessageFormat. The following replaceable parameters are 
# substituted into the output message string; you can use one, all--at a
# minimum, you probably want the log record message. A newline is 
# automatically added at the end of each message.
#
#    {0}  String.valueOf(record.getMillis()),
#    {1}  record.getLoggerName(),
#    {2}  record.getLevel().toString(),
#    {3}  record.getSourceClassName(),
#    {4}  record.getSourceMethodName(),
#    {5}  record.getMessage()
#    {6}  record.getThrown().getName()
#    {7}  record.getThrown().getMessage()
#    {8}  record.getThrown() stack trace
#
# Two formats, for with and without exception
xr.simple-log-format = {1} {2}:: {5}
xr.simple-log-format-throwable = {1} {2}:: {5}


# Values used for testing Configuration, do not modify
xr.test-config-byte = 8
xr.test-config-short = 16
xr.test-config-int = 100
xr.test-config-long = 2000
xr.test-config-float = 3000.25F
xr.test-config-double = 4000.50D
xr.test-config-boolean = true


# XR logging behavior. Follows conventions in 
# java.util.logging.LogManager. See there for details.
#
# The prefix for all entries here should be
#  xr.util-logging.

#
# ENABLE OR DISABLE ALL LOGGING
#   set to false to turn all Flying Saucer logging off, regardless of
#   other settings; corresponds to static method XRLog.setLoggingEnabled(bool);
#
xr.util-logging.loggingEnabled=false

# Handlers
# See JDK documentation for the Logging API; this is a space-separated list of class names that extend the
# java.util.logging.Handler class. Each class named here will be instantiated and assigned to the each FS
# logger (not the root logger, as the JDK log-properties load mechanism would do it). 
xr.util-logging.handlers=java.util.logging.ConsoleHandler

# Whether our loggers should send their log messages to their parent's handlers as well
# In our case, we don't want this, because our log messages will be sent to the handlers
# of the root logger, which will log the message as well
xr.util-logging.use-parent-handler=false

# Log level--you can assign a log level to the handler which processes log messages.
# By default, we assign a level to the console handler we attach to our loggers.
# See the JDK Logging API documentation.
#
# The default logging level for new ConsoleHandler instances
xr.util-logging.java.util.logging.ConsoleHandler.level=INFO

# Log formatter--you can assign a class to format the output of log messages.
# Each instance is assigned to a log Handler *which must be one of those listed in the handlers property
# above.
#
# The default formatter for new ConsoleHandler instances.
# Default for the JDK, uncomment to use.
# java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
# XR log formatter
xr.util-logging.java.util.logging.ConsoleHandler.formatter=org.openpdf.util.XRSimpleLogFormatter

# Log levels
#    NOTE: the name of this property is .level in the logging spec, hence the two ..
xr.util-logging.org.openpdf.level = ALL
xr.util-logging.org.openpdf.config.level = ALL
xr.util-logging.org.openpdf.exception.level = ALL
xr.util-logging.org.openpdf.general.level = ALL
xr.util-logging.org.openpdf.init.level = ALL
xr.util-logging.org.openpdf.load.level = ALL
xr.util-logging.org.openpdf.load.xml-entities.level = ALL
xr.util-logging.org.openpdf.match.level = ALL
xr.util-logging.org.openpdf.cascade.level = ALL
xr.util-logging.org.openpdf.css-parse.level = ALL
xr.util-logging.org.openpdf.layout.level = ALL
xr.util-logging.org.openpdf.render.level = ALL


# resource loading
#   full classname for the SAX parser to use; should be an implementation
#   of org.xml.sax.XMLReader
#   leave blank or "default" to use JDK default parser
#
#   piccolo: com.bluecast.xml.Piccolo
#   tagsoup: org.ccil.cowan.tagsoup.Parser
xr.load.xml-reader=default

#   : parser features
#
#   not all features are supported by all parsers. if the feature is not supported
#   , but you request it, the parser will throw an exception and FS will just log that
#   and keep going. check logs to see if you need to turn these features off. you can 
#   skip all features by setting configure-features to false

#   whether features should be set at all
xr.load.configure-features=false

#   whether pages should be validated against DTD or schema
#   ! careful: this will be very picky; pages will be rejected
#   NOTE! Piccolo will throw an error if validation is on--not supported
xr.load.validation=false

#   whether parser should try to use string.intern
#   this is experimental, currently only for developers
#   NOTE!: Piccolo will throw an error if interning is set to true--strings auto-intern'd
xr.load.string-interning=false

#   namespace support works such that one of the two features must be true, and the other false
#
#   whether parser should pass namespace info in during parsing
#   this is experimental, currently only for developers
xr.load.namespaces=false

#   whether parser should pass namespace attributes declaration attributes during parsing
#   this is experimental, currently only for developers
xr.load.namespace-prefixes=false

# layout controls
xr.layout.whitespace.experimental = true
xr.layout.bad-sizing-hack = false

# rendering controls
xr.renderer.viewport-repaint=true
xr.renderer.draw.backgrounds = true
xr.renderer.draw.borders = true
xr.renderer.debug.box-outlines = false

# text rendering controls using Java2D renderer (default when rendering to Swing panels)
#    scaling factor for rendering text; 1.25 would be "25% larger than default"
xr.text.scale=1.0

#    at what font-size should AA kick in. for older JVMs AA is very expensive and slow--set this to
#    a high value (like 25); for JDK 6, smoke tests show that AA is basically low-cost for Flying Saucer
#    we set it to a high value for the benefit of users still on JDK 1.4
xr.text.aa-fontsize-threshhold=25

#    when using Java2D for rendering, hint to renderer for AA algorithm to use
xr.text.aa-rendering-hint=RenderingHints.VALUE_TEXT_ANTIALIAS_HGRB

#When using Java2D for rendering, hint to render with fractional font metrics.
# default is false. valid values: true|false
#xr.text.fractional-font-metrics=false

# whether or not to cache stylesheets
# note that there is currently no way to remove
# stylesheets from the cache
xr.cache.stylesheets=false

# encoding used for reading/parsing stylesheets
# default/fallback is UTF-8
#xr.stylesheets.charset-name=UTF-8

### a bunch of properties used to turn on and off the incremental
###layout features
xr.incremental.enabled=false

# use lazy asynchronous image resources instead of normal synchronous ones
xr.incremental.lazyimage = false

# adds a per block delay of N milleseconds
xr.incremental.debug.layoutdelay=0

# prints how long each repaint takes
xr.incremental.repaint.print-timing=false

# whether or not the threads be used
# if false, xr.incremental.enabled is also
# implicitly false
xr.use.threads=false

# whether or not link and hover listeners will be used.
xr.use.listeners=true

# if BufferedImage should be use
# Note: On VMs and platforms with the most up-to-date acceleration techniques,
#       BufferedImage performs better, but there were serious performance
#       regressions due to differences in when/if images are accelerated or
#       not by the VM. In particular, we observed some serious regressions on
#       Windows even on simple pages like our splash screen. See
#       https://xhtmlrenderer.dev.java.net/servlets/ReadMsg?list=dev&msgNo=3307
# defaults to false
xr.image.buffered=false

# image loading
# on loading images that need to be scaled
#    on scaling, whether to use LOW, MID or HIGH-quality process. defaults to HIGH
xr.image.scale=LOW

# When rendering text, not all fonts support all character glyphs. When set to true, this
# will replace any missing characters with the specified character to aid in the debugging
# of your PDF.  Currently only supported for PDF rendering.
xr.renderer.replace-missing-characters=false
xr.renderer.missing-character-replacement=#

#    on scaling, what rendering hints to use; must be one of the rendering hints that corresponds to
#    RenderingHints.KEY_INTERPOLATION (e.g. RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR
#    VALUE_INTERPOLATION_BILINEAR or VALUE_INTERPOLATION_BICUBIC. Defaults to NEAREST_NEIGHBOR
xr.image.render-quality=java.awt.RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR

# async image loading properties
xr.image.background.workers=5
xr.image.background.greedy=true
